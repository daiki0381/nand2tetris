// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */

/** instruction
 * instruction[0] : out > 0 bit / j3
 * instruction[1] : out = 0 bit / j2
 * instruction[2] : out < 0 bit / j1
 * instruction[3] : M register bit / d3
 * instruction[4] : D register bit / d2
 * instruction[5] : A register bit / d1
 * instruction[6] : no bit / c6
 * instruction[7] : f bit / c5
 * instruction[8] : ny bit / c4
 * instruction[9] : zy bit / c3
 * instruction[10] : nx bit / c2
 * instruction[11] : zx bit / c1
 * instruction[12] : comp knee moc switching bit / a
 * instruction[13] : disuse bit
 * instruction[14] : disuse bit
 * instruction[15] : A instruction or C instruction bit / A instruction for 0, C instruction for 1
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    // dest
    And (a=instruction[3], b=instruction[15], out=writeM); // if d3 (M register) == 1 & C instruction then 1 else 0
    And (a=instruction[4], b=instruction[15], out=loadD); // if d4 (D register) == 1 & C instruction then 1 else 0

    Not (in=instruction[15], out=ainstruction);
    Or (a=instruction[5], b=ainstruction, out=loadA); // if d5 (A register) == 1 & (C instruction || A instruction) then 1 else 0

    // main
    Mux16 (a=instruction, b=aluout, sel=instruction[15], out=muxout1); // Discrimination between A and C instructions
    ARegister (in=muxout1, load=loadA, out=aout, out[0..14]=addressM);
    Mux16 (a=aout, b=inM, sel=instruction[12], out=muxout2); // comp knee moc switching (a)
    PC (in=aout, load=loadPC, inc=true, reset=reset, out[0..14]=pc);
    DRegister (in=aluout, load=loadD, out=dout);
    ALU (x=dout, y=muxout2, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=aluout, zr=zr, ng=ng);

    // jump
    Not (in=zr, out=notzr);    
    Not (in=ng, out=notng);    
    And (a=instruction[2], b=ng, out=w1); // if j1 == 1 & out < 0 then 1 else 0    
    And (a=instruction[0], b=notng, out=w2); // if j3 == 1 & out > 0 then 1 else 0
    Or (a=w1, b=w2, out=w3);
    And (a=notzr, b=w3, out=w4);
    And (a=instruction[1], b=zr, out=w5); // if j2 == 1 & out == 0 then 1 else 0
    Or (a=w4, b=w5, out=w6);
    And (a=instruction[15], b=w6, out=loadPC); // if C instruction & (j1 == 1 || j2 == 1 || j3 == 1) then 1 else 0
}
